<?xml version="1.0" encoding="UTF-8"?>
<!-- scanPeriod-表示扫描周期, 默认1 minutes, 此处即表示项目正常使用过程中会每7秒重新扫描一次该配置文件,
    unit: milliseconds, seconds, minutes or hours -->
<!-- debug-为true表示启动时会在控制台打印slf4j的启动日志 -->
<!-- scan-当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<configuration debug="true" scan="true" scanPeriod="7 seconds">
    <include resource="org/springframework/boot/logging/logback/base.xml"/>
    <property name="log_path" value="logs/"/>
    <property name="log_name" value="spring_boot"/>
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>
    <!-- 注意这里一定要放到springProfile里, 否则在你本机执行的时候还是会去找相应的文件 -->
    <springProfile name="dev">
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--日志文件输出的文件名-->
            <File>${log_path}/${log_name}.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${log_path}/${log_name}/%d{yyyy-MM}/${log_name}_%d{yyyy-MM-dd}.%i.log.zip
                </fileNamePattern>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>50MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
                <!--日志文件保留天数-->
                <maxHistory>15</maxHistory>
            </rollingPolicy>
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>%date [%level] [%thread] %logger{36}[%file :%line] %msg%n</pattern>
            </encoder>
        </appender>
        <appender name="asyncFileInfo" class="ch.qos.logback.classic.AsyncAppender">
            <discardingThreshold>0</discardingThreshold>
            <queueSize>256</queueSize>
            <appender-ref ref="FILE"/>
        </appender>
    </springProfile>
    <!-- 指定要对级别为ERROR日志信息过滤 -->
    <springProfile name="pro">
        <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMismatch>DENY</onMismatch>     <!-- 如果不匹配，则拒绝处理 -->
                <onMatch>ACCEPT</onMatch>         <!-- 如果匹配，则立即处理 -->
            </filter>
            <file>${log_path}/${log_name}_error.log</file> <!-- 文件名即路径 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${log_path}/${log_name}_error/%d{yyyy-MM}/${log_name}_error_%d{yyyy-MM-dd}.%i.log
                </fileNamePattern>
                <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                    <maxFileSize>20MB</maxFileSize>
                </timeBasedFileNamingAndTriggeringPolicy>
            </rollingPolicy>
            <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <pattern>%date [%level] [%thread] %logger{36}[%file :%line] %msg%n</pattern>
                </layout>
            </encoder>
        </appender>
        <appender name="asyncFileError" class="ch.qos.logback.classic.AsyncAppender">
            <discardingThreshold>0</discardingThreshold>
            <queueSize>256</queueSize>
            <appender-ref ref="error"/>
        </appender>
    </springProfile>

    <springProfile name="dev">
        <root level="INFO">
            <appender-ref ref="asyncFileInfo"/>
        </root>
    </springProfile>

    <springProfile name="pro">
        <root level="INFO">
            <appender-ref ref="asyncFileError"/>
        </root>
    </springProfile>


</configuration>